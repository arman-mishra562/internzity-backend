// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id
  name              String
  profile_pic_url   String?
  email             String   @unique
  password          String
  isEmailVerified   Boolean  @default(false)
  emailToken        String?  // for email verification
  emailTokenExpiry  DateTime?
  resetToken        String?   // for password resets
  resetTokenExpiry  DateTime?
  isAdmin           Boolean       @default(false)
  currentStreak     Int       @default(0)
  maxStreak         Int       @default(0)
  lastActiveAt      DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // back-relations:
  instructors       Instructor[]      // record per instructor
  enrollments       Enrollment[]      // courses user bought
  wishlists         Wishlist[]        // courses user saved
  notes             Note[]            // lecture notes by user
  transactions      Transaction[]     // payment transactions
}

// A "stream" or category for courses
model Stream {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

// Instructors (who must be verified by Admin)
model Instructor {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  bio            String     
  expertise      String[]
  isVerified     Boolean  @default(false)
  appliedAt      DateTime @default(now())
  courses        CourseInstructor[]
}

// Courses
model Course {
  id               String    @id @default(cuid())
  title            String
  thumbnail_url    String?
  description      String
  type             CourseType
  StartDate        DateTime?
  isPopular        Boolean    @default(false)
  priceCents       Int        // price in cents
  stream           Stream     @relation(fields: [streamId], references: [id])
  streamId         String
  instructors      CourseInstructor[]
  enrollments      Enrollment[]
  wishlists        Wishlist[]
  modules          Module[]   // only for self-paced
  discounts        Discount[]
  transactions     Transaction[] // payment transactions
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

// Join table: a course can have many instructors
model CourseInstructor {
  id            String     @id @default(cuid())
  course        Course     @relation(fields: [courseId], references: [id])
  courseId      String
  instructor    Instructor @relation(fields: [instructorId], references: [id])
  instructorId  String
  @@unique([courseId, instructorId])
}

// Enrollment records when a user purchases or enrolls
model Enrollment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  transactionId String? @unique // Link to payment transaction (one-to-one)
  purchasedAt DateTime @default(now())

  @@unique([userId, courseId])
}

// Wishlists: users can save courses
model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  savedAt   DateTime @default(now())
  
  @@unique([userId, courseId])
}

// Self-paced modules
model Module {
  id          String      @id @default(cuid())
  title       String
  course      Course      @relation(fields: [courseId], references: [id])
  courseId    String
  lectures    Lecture[]
  createdAt   DateTime    @default(now())
}

// Lectures within modules
model Lecture {
  id          String      @id @default(cuid())
  title       String
  videoUrl    String?
  module      Module      @relation(fields: [moduleId], references: [id])
  moduleId    String
  assignments Assignment[]
  notes       Note[]
}

// Assignments for lectures
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  lecture     Lecture  @relation(fields: [lectureId], references: [id])
  lectureId   String
}

// User notes on lectures
model Note {
  id         String   @id @default(cuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  lecture    Lecture  @relation(fields: [lectureId], references: [id])
  lectureId  String
  createdAt  DateTime @default(now())
}

model Discount {
  id         String   @id @default(cuid())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  // Discount as a percentage (e.g. 20 for 20% off)
  percent    Int      @default(0)
  // Optional expiry date (null = no expiry)
  validUntil DateTime?
  createdAt  DateTime @default(now())
}

// Payment transactions
model Transaction {
  id            String           @id @default(cuid())
  userId        String
  courseId      String
  amountCents   Int              // Amount in cents
  currency      String           @default("USD")
  paymentMethod PaymentMethod
  status        TransactionStatus @default(PENDING)
  gatewayOrderId String?         // Order ID from payment gateway
  gatewayPaymentId String?       // Payment ID from payment gateway
  gatewayResponse Json?          // Full response from payment gateway
  errorMessage  String?          // Error message if payment failed
  user          User             @relation(fields: [userId], references: [id])
  course        Course           @relation(fields: [courseId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

// Enum for payment methods
enum PaymentMethod {
  PAYPAL
  STRIPE
  GOOGLE_PAY
  RAZORPAY
}

// Enum for transaction status
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Enum for course type
enum CourseType {
  LIVE
  SELF_PACED
}

// Orphan-Safeguard Model
model Media {
  id         String   @id @default(cuid())
  key        String   @unique                  // S3 object key, e.g. "media/xyz.jpg"
  type       String                             // "profile", "thumbnail", "lecture_video", etc.
  entity     String?                            // name of the owning entity 
  entityId   String?                            // the owning record's ID
  uploadedAt DateTime @default(now())
  linkedAt   DateTime?                          // when we attached it to an entity

  @@index([type])
}
